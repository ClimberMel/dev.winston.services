{"version":3,"file":"static/js/4583.f629f976.chunk.js","mappings":"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","sources":["pages/dashboard/Messages/index.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nimport {\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n} from '@mui/material';\r\nimport TextField from '@mui/material/TextField';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useAuth from '../../../context/authContext';\r\n\r\nfunction MessageList({ messages }) {\r\n  const listRef = React.useRef(null);\r\n\r\n  React.useEffect(() => {\r\n    if (listRef.current) {\r\n      listRef.current.scrollTop = listRef.current.scrollHeight;\r\n    }\r\n  }, [messages]);\r\n\r\n  return (\r\n    <List ref={listRef} style={{ maxHeight: '400px', overflow: 'auto' }}>\r\n      {messages.map((msg, index) => (\r\n        <ListItem key={index}>\r\n          <Card variant=\"outlined\" style={{ width: '100%' }}>\r\n            <CardContent>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                <strong>To:</strong> {msg.to}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                <strong>Message:</strong> {msg.message}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                <strong>Date:</strong> {msg.date}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nMessageList.propTypes = {\r\n  messages: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      to: PropTypes.string.isRequired,\r\n      message: PropTypes.string.isRequired,\r\n      date: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n};\r\n\r\nexport default function Messages() {\r\n  const { connection } = useAuth();\r\n  const [messages, setMessages] = React.useState([]);\r\n  const [recipient, setRecipient] = React.useState('');\r\n  const [message, setMessage] = React.useState('');\r\n\r\n  const handleCommunication = (message, data) => {\r\n    if (!data.SIG || data.SIG === '') {\r\n      return;\r\n    }\r\n    if (!data.OP_CODE) {\r\n      return;\r\n    }\r\n\r\n    switch (data.OP_CODE) {\r\n      case 'MESSAGE':\r\n        console.log(message);\r\n        break;\r\n\r\n      default:\r\n        console.log(message);\r\n        return;\r\n    }\r\n    return;\r\n    // check op codes\r\n    // check if current sig\r\n  };\r\n\r\n  function handleSendMessage(event) {\r\n    event.preventDefault();\r\n    const newMessage = {\r\n      to: recipient,\r\n      message: message,\r\n      date: new Date().toISOString().split('T')[0],\r\n    };\r\n    connection.send(\r\n      JSON.stringify({\r\n        OP_CODE: 'MESSAGE',\r\n        SIG: 'No_Sig',\r\n        from: 'anonymous',\r\n        to: recipient,\r\n        data: newMessage,\r\n      })\r\n    );\r\n    setMessages([...messages, newMessage]);\r\n    setRecipient('');\r\n    setMessage('');\r\n  }\r\n  React.useEffect(() => {\r\n    connection.onmessage = async (message) => {\r\n      // console.log();\r\n      try {\r\n        const data = JSON.parse(await message.data.text(), false, 2);\r\n        handleCommunication(connection, data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n  });\r\n  return (\r\n    <div>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={12}>\r\n          <h2>Message Log</h2>\r\n          <MessageList messages={messages} />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <h2>Send Message</h2>\r\n          <form\r\n            onSubmit={handleSendMessage}\r\n            style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}\r\n          >\r\n            <TextField\r\n              id=\"recipient\"\r\n              name=\"recipient\"\r\n              label=\"Recipient\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              required\r\n              value={recipient}\r\n              onChange={(e) => setRecipient(e.target.value)}\r\n              autoComplete=\"off\"\r\n            />\r\n            <TextField\r\n              id=\"message\"\r\n              name=\"message\"\r\n              label=\"Message\"\r\n              variant=\"outlined\"\r\n              multiline\r\n              rows={4}\r\n              fullWidth\r\n              required\r\n              value={message}\r\n              onChange={(e) => setMessage(e.target.value)}\r\n              autoComplete=\"off\"\r\n            />\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n              Send\r\n            </Button>\r\n          </form>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["MessageList","_ref","messages","listRef","React","current","scrollTop","scrollHeight","_jsx","List","ref","style","maxHeight","overflow","children","map","msg","index","ListItem","Card","variant","width","_jsxs","CardContent","Typography","color","component","to","message","date","Messages","connection","useAuth","setMessages","recipient","setRecipient","setMessage","onmessage","async","data","JSON","parse","text","handleCommunication","SIG","OP_CODE","console","log","error","Grid","container","spacing","item","xs","onSubmit","event","preventDefault","newMessage","Date","toISOString","split","send","stringify","from","display","flexDirection","gap","TextField","id","name","label","fullWidth","required","value","onChange","e","target","autoComplete","multiline","rows","Button","type"],"sourceRoot":""}