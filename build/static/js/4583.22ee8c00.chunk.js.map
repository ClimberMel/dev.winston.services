{"version":3,"file":"static/js/4583.22ee8c00.chunk.js","mappings":"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","sources":["pages/dashboard/Messages/index.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nimport {\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Tabs,\r\n  Tab,\r\n  Box,\r\n  CardActions,\r\n} from '@mui/material';\r\nimport TextField from '@mui/material/TextField';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport useAuth from '../../../context/authContext';\r\nimport {\r\n  /*userAccountSelector,*/ userPerMessageEncryptionSelector,\r\n} from '../../../store/user';\r\n\r\nfunction MessageList({ messages, handleDeleteMessage, handleSaveMessage }) {\r\n  const listRef = React.useRef(null);\r\n\r\n  React.useEffect(() => {\r\n    if (listRef.current) {\r\n      listRef.current.scrollTop = listRef.current.scrollHeight;\r\n    }\r\n  }, [messages]);\r\n\r\n  return (\r\n    <List ref={listRef} style={{ maxHeight: '400px', overflow: 'auto' }}>\r\n      {messages.map((msg, index) => (\r\n        <ListItem key={index}>\r\n          <Card variant=\"outlined\" style={{ width: '100%' }}>\r\n            {!msg.saved && <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => handleSaveMessage(msg)}\r\n              style={{ float: 'right', marginRight: '8px' }}\r\n            >\r\n              Save\r\n            </Button>}\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={() => handleDeleteMessage(index, true)}\r\n              style={{ float: 'right' }}\r\n            >\r\n              Delete\r\n            </Button>\r\n            <CardContent>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                <strong>To:</strong> {msg.to}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                <strong>Message:</strong> {msg.message}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                <strong>Date:</strong> {msg.date}\r\n              </Typography>\r\n            </CardContent>\r\n              <CardActions>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                  {msg.saved ? <em>Saved</em> : <em>This message will self destruct in 30s</em>}\r\n                </Typography>\r\n              </CardActions>\r\n          </Card>\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nMessageList.propTypes = {\r\n  messages: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      to: PropTypes.string.isRequired,\r\n      message: PropTypes.string.isRequired,\r\n      date: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n  handleDeleteMessage: PropTypes.func.isRequired,\r\n  handleSaveMessage: PropTypes.func.isRequired,\r\n};\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`tabpanel-${index}`}\r\n      aria-labelledby={`tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box p={3}>{children}</Box>}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  value: PropTypes.any.isRequired,\r\n  index: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `tab-${index}`,\r\n    'aria-controls': `tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nexport function TabPanels({ tabs, value, handleChange }) {\r\n  return (\r\n    <div>\r\n      <Tabs value={value} onChange={handleChange} aria-label=\"tabs\">\r\n        {tabs.map((tab, index) => (\r\n          <Tab label={tab.label} {...a11yProps(index)} key={index} />\r\n        ))}\r\n      </Tabs>\r\n      {tabs.map((tab, index) => (\r\n        <TabPanel value={value} index={index} key={index}>\r\n          {tab.component}\r\n        </TabPanel>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanels.propTypes = {\r\n  tabs: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      label: PropTypes.string.isRequired,\r\n      component: PropTypes.node.isRequired,\r\n    })\r\n  ).isRequired,\r\n  value: PropTypes.number.isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function Messages() {\r\n  const { connection } = useAuth();\r\n  const [messages, setMessages] = React.useState([]);\r\n  const [recipient, setRecipient] = React.useState('');\r\n  const [message, setMessage] = React.useState('');\r\n  // const { user } = useSelector(userAccountSelector);\r\n  const perMessageEncryption = useSelector(userPerMessageEncryptionSelector);\r\n  const [channel, setChannel] = React.useState('messages');\r\n\r\n  const encryptMessage = (message) => {\r\n    // encrypt message\r\n    return message;\r\n  };\r\n\r\n  const timeoutRef = React.useRef(null);\r\n\r\n  const decryptMessage = (message) => {\r\n    // decrypt message\r\n    return message;\r\n  };\r\n\r\n  const handleCommunication = (message, data) => {\r\n    //console.log('incoming', message, data);\r\n    // check op codes\r\n\r\n    // check if current sig\r\n    if (!data.SIG || data.SIG === '') {\r\n      return;\r\n    }\r\n    if (!data.OP_CODE) {\r\n      return;\r\n    }\r\n\r\n    let decryptedMessage = data.data;\r\n    const removeFirst = () => {\r\n      setMessages((prevMessages) => prevMessages.slice(1));\r\n      timeoutRef.current = setTimeout(removeFirst, 30000);\r\n    };\r\n    switch (data.OP_CODE) {\r\n      case 'MESSAGE':\r\n        // console.log('Message Data', data.data);\r\n        if (perMessageEncryption) {\r\n          // decrypt message\r\n          decryptedMessage = decryptMessage(data.data);\r\n        }\r\n\r\n        setMessages((prevMessages) => {\r\n          const newMessages = [...prevMessages, decryptedMessage];\r\n          if (!timeoutRef.current) {\r\n            timeoutRef.current = setTimeout(removeFirst, 30000);\r\n          }\r\n          return newMessages;\r\n        });\r\n        break;\r\n      default:\r\n        // console.log(message);\r\n        return;\r\n    }\r\n    return;\r\n  };\r\n\r\n  const handleChannelChange = (value) => {\r\n    setChannel(value);\r\n  };\r\n\r\n  const channels = ['messages', 'private', 'voting', 'saved'];\r\n\r\n  const handleDeleteMessage = React.useCallback((index, force = false) => {\r\n    setMessages((prevMessages) => {\r\n      const newMessages = [...prevMessages];\r\n      if (force || newMessages[index] && !newMessages[index].saved) {\r\n        // console.log('Deleting message at index', index);\r\n        newMessages.splice(index, 1);\r\n        return newMessages;\r\n      }\r\n      return newMessages;\r\n    });\r\n  }, []);\r\n\r\n  const removeFirst = React.useCallback(() => {\r\n    // get the first unsaved message and delete it\r\n    const firstUnsavedIndex = messages.findIndex((msg) => !msg.saved);\r\n    handleDeleteMessage(firstUnsavedIndex);\r\n  }, [handleDeleteMessage, messages]);\r\n\r\n  function handleSendMessage(event) {\r\n    event.preventDefault();\r\n    if (!channel || !message) {\r\n      return;\r\n    }\r\n    const newMessage = {\r\n      to: recipient,\r\n      from: connection.id,\r\n      channel,\r\n      message: perMessageEncryption ? encryptMessage(message) : message,\r\n      date: new Date().toISOString().split('T')[0],\r\n      saved: false,\r\n    };\r\n    // console.log('Handle Send :', connection)\r\n    connection.send(\r\n      JSON.stringify({\r\n        OP_CODE: 'MESSAGE',\r\n        SIG: 'No_Sig',\r\n        from: 'anonymous',\r\n        to: recipient,\r\n        data: newMessage,\r\n      })\r\n    );\r\n    \r\n    setMessages((prevMessages) => {\r\n      const newMessages = [...prevMessages, newMessage];\r\n      if (!timeoutRef.current) {\r\n        timeoutRef.current = setTimeout(removeFirst, 30000);\r\n      }\r\n      return newMessages;\r\n    });\r\n    setRecipient('');\r\n    setMessage('');\r\n  }\r\n\r\n  function a11yProps(index) {\r\n    return {\r\n      id: `tab-${index}`,\r\n      'aria-controls': `tabpanel-${index}`,\r\n    };\r\n  }\r\n\r\n\r\n  function handleSaveMessage(message) {\r\n    setMessages((prevMessages) =>\r\n      prevMessages.map((msg) =>\r\n        msg === message ? { ...msg, saved: true } : msg\r\n      )\r\n    );\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    connection.onmessage = async (message) => {\r\n      // console.log();\r\n      try {\r\n        const data = JSON.parse(await message.data.text(), false, 2);\r\n        handleCommunication(connection, data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (messages.length > 0) {\r\n      timeoutRef.current = setTimeout(removeFirst, 30000);\r\n    }\r\n    return () => {\r\n      clearTimeout(timeoutRef.current);\r\n    };\r\n  }, [messages, removeFirst]);\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={12}>\r\n          <h2>Message Log</h2>\r\n          <Tabs\r\n            value={channel}\r\n            onChange={(e, v) => handleChannelChange(v)}\r\n            textColor=\"inherit\"\r\n            indicatorColor=\"primary\"\r\n          >\r\n            {channels.map((ch) => (\r\n              <Tab key={ch} label={ch} value={ch} {...a11yProps(0)} />\r\n            ))}\r\n          </Tabs>\r\n          {channels.map((ch) => (\r\n            <TabPanel key={ch} value={channel} index={ch}>\r\n              <MessageList\r\n                messages={messages.filter((msg) => msg.channel === ch)}\r\n                handleDeleteMessage={handleDeleteMessage}\r\n                handleSaveMessage={handleSaveMessage}\r\n              />\r\n            </TabPanel>\r\n          ))}\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <h2>Send Message</h2>\r\n          <form\r\n            onSubmit={handleSendMessage}\r\n            style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}\r\n          >\r\n            <TextField\r\n              id=\"recipient\"\r\n              name=\"recipient\"\r\n              label=\"Recipient\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              value={recipient}\r\n              onChange={(e) => setRecipient(e.target.value)}\r\n              autoComplete=\"off\"\r\n            />\r\n            <TextField\r\n              id=\"message\"\r\n              name=\"message\"\r\n              label=\"Message\"\r\n              variant=\"outlined\"\r\n              multiline\r\n              rows={4}\r\n              fullWidth\r\n              required\r\n              value={message}\r\n              onChange={(e) => setMessage(e.target.value)}\r\n              autoComplete=\"off\"\r\n            />\r\n\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n              Send\r\n            </Button>\r\n          </form>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["MessageList","_ref","messages","handleDeleteMessage","handleSaveMessage","listRef","React","current","scrollTop","scrollHeight","_jsx","List","ref","style","maxHeight","overflow","children","map","msg","index","ListItem","_jsxs","Card","variant","width","saved","Button","color","onClick","float","marginRight","CardContent","Typography","component","to","message","date","CardActions","TabPanel","props","value","other","role","hidden","id","Box","p","a11yProps","TabPanels","_ref2","tabs","handleChange","Tabs","onChange","tab","_createElement","Tab","label","key","Messages","connection","useAuth","setMessages","recipient","setRecipient","setMessage","perMessageEncryption","useSelector","userPerMessageEncryptionSelector","channel","setChannel","timeoutRef","channels","force","arguments","length","undefined","prevMessages","newMessages","splice","removeFirst","firstUnsavedIndex","findIndex","onmessage","async","handleCommunication","data","SIG","OP_CODE","decryptedMessage","slice","setTimeout","JSON","parse","text","error","console","clearTimeout","Grid","container","spacing","item","xs","e","v","textColor","indicatorColor","ch","filter","onSubmit","event","preventDefault","newMessage","from","Date","toISOString","split","send","stringify","display","flexDirection","gap","TextField","name","fullWidth","target","autoComplete","multiline","rows","required","type"],"sourceRoot":""}