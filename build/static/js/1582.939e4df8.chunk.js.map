{"version":3,"file":"static/js/1582.939e4df8.chunk.js","mappings":"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","sources":["components/common/CheckBox.js","components/common/TextField.js","pages/wizard/pages/coin/StepBlockConfirmation.js","../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js"],"sourcesContent":["import React from 'react';\n\nimport {\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormHelperText,\n  Grid,\n} from '@mui/material';\nimport { useField, useFormikContext } from 'formik';\nimport { PropTypes } from 'prop-types';\n\nconst CheckboxWrapper = ({\n  name,\n  label,\n  helperText = '',\n  onChange,\n  ...otherProps\n}) => {\n  const { setFieldValue } = useFormikContext();\n  const [field, meta] = useField(name);\n\n  const handleChange = (evt) => {\n    const { checked } = evt.target;\n    setFieldValue(name, checked);\n    if (onChange) {\n      onChange(checked);\n    }\n  };\n\n  const configCheckbox = {\n    ...field,\n    ...otherProps,\n    checked: field.value,\n    onChange: handleChange,\n  };\n\n  const configFormControl = {};\n  if (meta && meta.touched && meta.error) {\n    configFormControl.error = true;\n  }\n\n  return (\n    <FormControl {...configFormControl}>\n      <Grid display={'flex'} alignItems=\"center\">\n        <FormGroup>\n          <FormControlLabel\n            control={<Checkbox {...configCheckbox} />}\n            label={label}\n          />\n        </FormGroup>\n        {helperText && (\n          <FormHelperText sx={{ ml: -1 }}>\n            ({configFormControl.error ? label + 'must be selected' : helperText}\n            )\n          </FormHelperText>\n        )}\n      </Grid>\n    </FormControl>\n  );\n};\n\nCheckboxWrapper.propTypes = {\n  name: PropTypes.string,\n  label: PropTypes.string,\n  helperText: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default CheckboxWrapper;\n","import React from 'react';\n\nimport { TextField } from '@mui/material';\nimport { useField } from 'formik';\nimport { PropTypes } from 'prop-types';\n\nconst TextFieldWrapper = ({ name, onChange, ...otherProps }) => {\n  const [field, meta, { setValue }] = useField(name);\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n    if (onChange) {\n      onChange(e.target.value);\n    }\n  };\n\n  const configTextField = {\n    ...field,\n    ...otherProps,\n    fullWidth: true,\n    variant: 'outlined',\n    onChange: handleChange,\n  };\n  if (meta && meta.touched && meta.error) {\n    configTextField.error = true;\n    configTextField.helperText = meta.error;\n  }\n  // console.log('render');\n  return <TextField autoComplete=\"off\" {...configTextField} />;\n};\n\nTextFieldWrapper.propTypes = {\n  name: PropTypes.node,\n  onChange: PropTypes.func,\n};\n\nexport default TextFieldWrapper;\n","import React from 'react';\n\nimport { Grid, Card, Button, Paper, Typography } from '@mui/material';\nimport { Formik, Form } from 'formik';\nimport { PropTypes } from 'prop-types';\nimport { useOutletContext } from 'react-router-dom';\nimport * as Yup from 'yup';\n\nimport CheckBox from './../../../../components/common/CheckBox';\nimport TextField from './../../../../components/common/TextField';\n\nfunction StepCoinBlockConfirmation({ wizardCoinData, setWizardCoinData }) {\n  const { previous, next } = useOutletContext();\n  const handleSubmit = (values) => {\n    setWizardCoinData(values);\n    next();\n  };\n\n  const budgetCal =\n    (parseInt(wizardCoinData.blockRewardPos).toFixed(8) / 100) *\n    wizardCoinData.superblockReward *\n    (1440 / parseInt(wizardCoinData.targetSpacingInMinutes)) *\n    30;\n\n  const FORM_VALIDATION = Yup.object().shape({\n    minimumCoinAge:\n      wizardCoinData.coinAlgorithm ===\n        'Scrypt- Proof of Work and Proof of Stack' &&\n      Yup.number()\n        .required('The “Minimum coin age” value cannot be empty.')\n        .min(\n          1,\n          'The “Minimum coin age” value must be a number between 1 and 1000.'\n        )\n        .max(\n          1000,\n          'The “Minimum coin age” value must be a number between 1 and 1000.'\n        ),\n    coinbaseMaturity: Yup.number()\n      .required('The “Coinbase maturity” value cannot be empty.')\n      .min(\n        1,\n        'The “Coinbase maturity” value must be a number between 1 and 100.'\n      )\n      .max(\n        100,\n        'The “Coinbase maturity” value must be a number between 1 and 100.'\n      ),\n    numberOfConfirmations: Yup.number()\n      .required('The “Number of confirmations” value cannot be empty.')\n      .min(\n        1,\n        'The “Number of confirmations” value must be a number between 1 and 100.'\n      )\n      .max(\n        100,\n        'The “Number of confirmations” value must be a number between 1 and 100.'\n      ),\n    targetSpacingInMinutes: Yup.number()\n      .required('The “Target spacing in minutes” value cannot be empty.')\n      .min(\n        1,\n        'The “Target spacing in minutes” value must be a number between 1 and 120.'\n      )\n      .max(\n        120,\n        'The “Target spacing in minutes” value must be a number between 1 and 120.'\n      ),\n    targetTimespanInMinutes: Yup.number()\n      .required('The “Target timespan in minutes” value cannot be empty.')\n      .min(\n        1,\n        'The “Target timespan in minutes” value must be a number between 1 and 120.'\n      )\n      .max(\n        120,\n        'The “Target timespan in minutes” value must be a number between 1 and 120.'\n      ),\n    masternodeAmount:\n      [\n        'X11 - Proof of Work + Masternode',\n        'Proof of Work and Proof of Stake + Masternode',\n      ].includes(wizardCoinData.coinAlgorithm) &&\n      Yup.number()\n        .required('The “Masternode amount” value cannot be empty.')\n        .min(\n          1,\n          'The “Masternode amount” value must be a number between 1 and 1000000000.'\n        )\n        .max(\n          1000000000,\n          'The “Masternode amount” value must be a number between 1 and 1000000000.'\n        ),\n    masternodeConfirmations:\n      [\n        'X11 - Proof of Work + Masternode',\n        'Proof of Work and Proof of Stake + Masternode',\n      ].includes(wizardCoinData.coinAlgorithm) &&\n      Yup.number()\n        .required('The “Masternode confirmations” value cannot be empty.')\n        .min(\n          1,\n          'The “Masternode confirmations” value must be a number between 1 and 1000.'\n        )\n        .max(\n          1000,\n          'The “Masternode confirmations” value must be a number between 1 and 1000.'\n        ),\n    node1:\n      wizardCoinData.hardCodedNode &&\n      Yup.string().required('The “Node 1” value cannot be empty.'),\n  });\n\n  return (\n    <Grid item xs={12}>\n      <Formik\n        initialValues={{ ...wizardCoinData }}\n        validationSchema={FORM_VALIDATION}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <Card sx={{ p: { xs: 2.5, sm: 4, md: 5, lg: 6 } }} elevation={0}>\n            <Grid display={'flex'} flexDirection=\"column\" gap={3}>\n              {wizardCoinData.coinAlgorithm ===\n                'Scrypt- Proof of Work and Proof of Stack' && (\n                <TextField\n                  name={'minimumCoinAge'}\n                  label={'Minimum Coin Age'}\n                  placeholder={'8'}\n                  helperText=\"Number of hours before confirmed coins begin to stake.\"\n                  autoComplete=\"off\"\n                />\n              )}\n\n              <TextField\n                name={'coinbaseMaturity'}\n                label={'Coinbase maturity'}\n                placeholder={'50'}\n                helperText=\"Number of coins received for mining a block with Proof of Work.\"\n                autoComplete=\"off\"\n              />\n              <TextField\n                name={'numberOfConfirmations'}\n                label={'Number of confirmations'}\n                placeholder={'6'}\n                helperText=\"Number of blocks before a transaction is confirmed.\"\n                autoComplete=\"off\"\n              />\n              <TextField\n                name=\"targetSpacingInMinutes\"\n                label={'Target spacing in minutes'}\n                placeholder={'5'}\n                helperText=\"Number of minutes it should take to mine a block.\"\n                autoComplete=\"off\"\n                onChange={(value) => {\n                  setWizardCoinData({\n                    targetSpacingInMinutes: value,\n                  });\n                }}\n              />\n              {wizardCoinData.coinAlgorithm ===\n              'Proof of Work and Proof of Stake + Masternode' ? (\n                <Paper\n                  elevation={0}\n                  sx={{ padding: '20px', backgroundColor: '#4F409A' }}\n                >\n                  <Typography>\n                    <strong>Governance budget structure</strong>\n                  </Typography>\n                  <Typography>\n                    Estimated amount of blocks per day:{' '}\n                    <strong>\n                      {1440 / parseInt(wizardCoinData.targetSpacingInMinutes)}\n                    </strong>\n                  </Typography>\n                  <Typography>\n                    Governance budget per month: (( <strong>5.00000000</strong>{' '}\n                    / 100) * <strong>50</strong>) *{' '}\n                    <strong>\n                      {1440 / parseInt(wizardCoinData.targetSpacingInMinutes)}{' '}\n                    </strong>\n                    * 30 = <strong>{budgetCal.toFixed(8)} </strong>\n                  </Typography>\n                </Paper>\n              ) : (\n                <></>\n              )}\n              <TextField\n                name=\"targetTimespanInMinutes\"\n                label={'Target timespan in minutes'}\n                placeholder={'10'}\n                helperText=\"Number of minutes before difficulty of the network is re-adjusted.\"\n                autoComplete=\"off\"\n              />\n\n              {[\n                'X11 - Proof of Work + Masternode',\n                'Proof of Work and Proof of Stake + Masternode',\n              ].includes(wizardCoinData.coinAlgorithm) && (\n                <>\n                  <TextField\n                    name=\"masternodeAmount\"\n                    label={'Masternode amount'}\n                    placeholder={'1000'}\n                    helperText=\"Number of coins required to install a masternode.\"\n                    autoComplete=\"off\"\n                  />\n                  <TextField\n                    name=\"masternodeConfirmations\"\n                    label={'Masternode confirmations'}\n                    placeholder={'15'}\n                    helperText=\"Number of confirmations before the masternode installation transaction is accepted.\"\n                    autoComplete=\"off\"\n                  />\n                </>\n              )}\n\n              <CheckBox\n                name=\"hardCodedNode\"\n                label={'Hardcoded node'}\n                helperText=\"Your wallet will automatically connect with a hardcoded\n                    node.\"\n                onChange={(value) =>\n                  setWizardCoinData({ hardCodedNode: value })\n                }\n              />\n              {wizardCoinData.hardCodedNode === true ? (\n                <>\n                  {' '}\n                  <TextField\n                    name={'node1'}\n                    label={'Node 1'}\n                    placeholder={'Node2.winston.services'}\n                    helperText=\"Hostname/IP of server that will run a node for your coin.\"\n                    autoComplete=\"off\"\n                  />\n                  <TextField\n                    name={'node2'}\n                    label={'Node 2'}\n                    placeholder={'Secondnode.winston.services'}\n                    helperText=\"Hostname/IP of second server that will run a node for your coin.\"\n                    autoComplete=\"off\"\n                  />\n                </>\n              ) : (\n                <></>\n              )}\n            </Grid>\n          </Card>\n          <Grid mt={4} display=\"flex\" justifyContent=\"flex-end\" gap={2}>\n            <Button\n              variant=\"outlined\"\n              onClick={previous}\n              sx={{ width: { xs: '50%', sm: 'auto' } }}\n            >\n              Previous\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              type=\"submit\"\n              sx={{ width: { xs: '50%', sm: 'auto' } }}\n            >\n              Next\n            </Button>\n          </Grid>\n        </Form>\n      </Formik>\n    </Grid>\n  );\n}\nStepCoinBlockConfirmation.propTypes = {\n  wizardData: PropTypes.object,\n  wizardCoinData: PropTypes.object,\n  setWizardCoinData: PropTypes.func,\n};\nexport default StepCoinBlockConfirmation;\n","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\n\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n\n  const {\n    className,\n    raised = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    raised\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;"],"names":["_ref","name","label","helperText","onChange","otherProps","setFieldValue","useFormikContext","field","meta","useField","configCheckbox","checked","value","evt","target","configFormControl","touched","error","_jsx","FormControl","children","_jsxs","Grid","display","alignItems","FormGroup","FormControlLabel","control","Checkbox","FormHelperText","sx","ml","setValue","configTextField","fullWidth","variant","e","TextField","autoComplete","wizardCoinData","setWizardCoinData","previous","next","useOutletContext","budgetCal","parseInt","blockRewardPos","toFixed","superblockReward","targetSpacingInMinutes","FORM_VALIDATION","Yup","shape","minimumCoinAge","coinAlgorithm","required","min","max","coinbaseMaturity","numberOfConfirmations","targetTimespanInMinutes","masternodeAmount","includes","masternodeConfirmations","node1","hardCodedNode","item","xs","Formik","initialValues","validationSchema","onSubmit","values","Form","Card","p","sm","md","lg","elevation","flexDirection","gap","placeholder","Paper","padding","backgroundColor","Typography","_Fragment","CheckBox","mt","justifyContent","Button","onClick","width","color","type","getCardUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardRoot","styled","overridesResolver","props","styles","root","overflow","React","inProps","ref","useThemeProps","className","raised","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","clsx","undefined"],"sourceRoot":""}